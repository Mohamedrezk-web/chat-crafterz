CREATE TABLE chatbots (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    clerk_user_id VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE chatbot_characteristics (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chatbot_id INT NOT NULL REFERENCES chatbots(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE guests (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE chat_sessions (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chatbot_id INT NOT NULL REFERENCES chatbots(id) ON DELETE CASCADE,
    guest_id INT REFERENCES guests(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE messages (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_session_id INT NOT NULL REFERENCES chat_sessions(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    sender VARCHAR(50) NOT NULL
);

CREATE OR REPLACE FUNCTION set_created_at()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.created_at IS NULL THEN
    NEW.created_at = CURRENT_TIMESTAMP;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_chatbots_created_at
BEFORE INSERT ON chatbots
FOR EACH ROW
EXECUTE FUNCTION set_created_at();

CREATE TRIGGER set_chatbot_characteristics_created_at
BEFORE INSERT ON chatbot_characteristics
FOR EACH ROW
EXECUTE FUNCTION set_created_at();

CREATE TRIGGER set_guests_created_at
BEFORE INSERT ON guests
FOR EACH ROW
EXECUTE FUNCTION set_created_at();

CREATE TRIGGER set_chat_sessions_created_at
BEFORE INSERT ON chat_sessions
FOR EACH ROW
EXECUTE FUNCTION set_created_at();

CREATE TRIGGER set_messages_created_at
BEFORE INSERT ON messages
FOR EACH ROW
EXECUTE FUNCTION set_created_at();

INSERT INTO chatbots (clerk_user_id, name) VALUES
('clerk_user_1', 'Customer Support Bot'),
('clerk_user_2', 'Sales Bot'),
('clerk_user_3', 'HR Assistant Bot'),
('clerk_user_4', 'Tech Support Bot');

INSERT INTO chatbot_characteristics (chatbot_id, content) VALUES
(1, 'You are a helpful customer support assistant.'),
(1, 'Our support hours are 9am-5pm, Monday to Friday.'),
(1, 'You can track your order on our website.'),
(2, 'You are a knowledgeable sales assistant.'),
(2, 'We offer a 30-day money-back guarantee on all products.'),
(2, 'Our products are available in various sizes and colors.'),
(3, 'You assist with HR-related queries and employee onboarding.'),
(3, 'Provide detailed information about company policies.'),
(4, 'You provide assistance with technical issues and IT support.');

INSERT INTO guests (name, email) VALUES
('Guest One', 'guest1@example.com'),
('Guest Two', 'guest2@example.com'),
('Guest Three', 'guest3@example.com'),
('Guest Four', 'guest4@example.com'),
('Guest Five', 'guest5@example.com');

INSERT INTO chat_sessions (chatbot_id, guest_id) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(1, 5);

INSERT INTO messages (chat_session_id, content, sender) VALUES
(1, 'Hello, I need help with my order.', 'user'),
(1, 'Sure, I can help with that. What seems to be the issue?', 'ai'),
(2, 'Can you tell me more about your products?', 'user'),
(2, 'Of course! We offer a variety of products. Which one are you interested in?', 'ai'),
(3, 'Can you explain the leave policy?', 'user'),
(3, 'Our leave policy allows 21 paid leaves annually.', 'ai'),
(4, 'I need help resetting my password.', 'user'),
(4, 'Please visit the IT portal and follow the password reset instructions.', 'ai'),
(5, 'Where can I track my order?', 'user'),
(5, 'You can track your order using the tracking link sent to your email.', 'ai');
